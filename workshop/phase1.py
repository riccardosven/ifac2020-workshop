import numpy as np
import scipy

true_system = np.asarray(
    [
        0.0,
        2.5549607990869583,
        3.026764155273646,
        1.410660208807455,
        -0.6575902716007578,
        -1.355650208787404,
        -0.1376936204812178,
        1.9555255806528637,
        3.275489705509226,
        2.933470985778799,
        1.4341934244950552,
        0.14282522413963372,
        0.11992147138424425,
        1.3094923984963414,
        2.6908875068764666,
        3.1817868994314455,
        2.503755821236888,
        1.3269311449945231,
        0.647928263342004,
        0.968059967784821,
        1.9432327434526724,
        2.7383088113931713,
        2.7373103707780566,
        2.0117353506266213,
        1.1984004994231032,
        0.9402320065501933,
        1.3756543038881444,
        2.0772173956313464,
        2.4452223199110064,
        2.200409431574995,
        1.5751788436899419,
        1.0803929322026646,
        1.0734386730327414,
        1.4893941996212903,
        1.9330852176812576,
        2.024457281178439,
        1.6989122651982467,
        1.2285309714137007,
        0.9740257274759326,
        1.0900523140863445,
        1.42224326646391,
        1.6593587029909067,
        1.5953954726899844,
        1.2830982477478068,
        0.967411055731244,
        0.8727324689651808,
        1.0268149706563467,
        1.2575808408417202,
        1.3488484663936835,
        1.216170750113607,
        0.9612952646362944,
        0.7736258282385544,
        0.7715276427830794,
        0.9151885767359746,
        1.0533591607382549,
        1.0540716467299618,
        0.9075533135828141,
        0.7223078997186847,
        0.6276905796316865,
        0.6692463093269643,
        0.7805763842950016,
        0.8467462093617357,
        0.8001530756716512,
        0.6696575366235848,
        0.5484504246443413,
        0.5139306891422409,
        0.5677778363774071,
        0.6418542125766198,
        0.6589579559742273,
        0.5949608004052944,
        0.49287796299126024,
        0.4222986583514994,
        0.42160284353276406,
        0.4704742890532804,
        0.5116302870504428,
        0.49981464368293854,
        0.43656012273364136,
        0.36448919086817383,
        0.3295455849509938,
        0.344200908510713,
        0.3807469616073211,
        0.3971211763663864,
        0.3716561263201159,
        0.31831822924068215,
        0.2722058691093093,
        0.2596611922775822,
        0.2781898535959269,
        0.3011891508003857,
        0.3013596073021129,
        0.27243116172984566,
        0.23212047336129335,
        0.20576668834597006,
        0.20548187296501028,
        0.22179385114937358,
        0.2332202661282276,
        0.22446015142089765,
        0.19793990025741653,
        0.17018472764798565,
        0.15734663817264832,
        0.1624125623646896,
        0.17408525241066564,
        0.17710908486161742,
        0.16475057723845615,
        0.14332147315262056,
        0.125915169655865,
        0.12135943973118472,
        0.12761137089519653,
        0.13441237922134047,
        0.13221051980710305,
        0.11966895572436709,
        0.10393609947184962,
        0.09415511450366539,
        0.09401088872507796,
        0.09932217679891003,
        0.10210768448943672,
        0.09727971305631317,
        0.08640119749422975,
        0.0758048644736887,
        0.0711064593931053,
        0.07281182586979285,
        0.07640002127555,
        0.07638850832742819,
        0.07077301417384974,
        0.06228219502411187,
        0.05575580176672388,
        0.05409802291516902,
        0.056154178536474,
        0.058012181187651,
        0.056368290172446975,
        0.0510882856166267,
        0.04500811910983546,
        0.04139622026633798,
        0.041315276861441916,
        0.04298712297360574,
        0.043473305994625726,
        0.04111600041456605,
        0.03672914533326848,
        0.03271386560921321,
        0.030998761907744626,
        0.03155227635199013,
        0.03259320598243564,
        0.03216989940964864,
        0.029723814343049562,
        0.0263978918934152,
        0.02396499758123972,
        0.023358897022659628,
        0.024011772316217997,
        0.024446988782158754,
        0.023536591850444693,
        0.021361863826816832,
        0.01903184614326122,
        0.017703505340306652,
        0.017657597851092794,
        0.018158416770563877,
        0.01813378907005714,
        0.01705715973893848,
        0.015312304659672205,
        0.013800657947257653,
        0.01317534604609127,
        0.013345587879178973,
        0.013618978794910872,
        0.013307729773462389,
        0.012273310330132023,
        0.01098308596668066,
        0.010080655993960722,
        0.009857423425232405,
        0.010054268729611942,
        0.010119179563285383,
        0.00967275063272547,
        0.008792197095718837,
        0.007905804742299294,
        0.007418842623340201,
        0.007393537090564546,
        0.007531950268378325,
        0.007446389047832088,
        0.006975220115184989,
        0.006289077836515939,
        0.005723206246042804,
        0.005495195294396799,
        0.005543109158393402,
        0.005600976238348801,
        0.0054290259103109495,
        0.005001129917688961,
        0.004504762541705045,
        0.0041714369925947405,
        0.004088413975588324,
        0.004142924498905598,
        0.004130507598582908,
        0.003925779736426119,
        0.003574121631220817,
        0.0032390694268997593,
        0.0030609639135582866,
        0.0030475364882441374,
        0.003080222566622941,
        0.003020125389108015,
        0.002819995256259517,
        0.002552767746600258,
        0.0023419874093841718,
        0.0022587225843455094,
        0.0022699964881242396,
    ]
)


def load_data():
    "Loads the data for the simulation example"
    np.random.seed(1337)
    u = np.random.randn(400)
    U = scipy.linalg.toeplitz(u, np.zeros_like(true_system))
    e = 1.5 * np.random.randn(400)
    y = U @ true_system + e
    return u, y


def likelihood_function(U, y):
    "Returns the marginal likelihood function for the given data"
    N, n = U.shape
    row = np.arange(n)[np.newaxis]
    T = np.maximum(row, row.T)
    a = np.zeros(N)

    def _fun(theta):
        E = theta[0] * (U @ (theta[1] ** T) @ U.T + theta[2] * np.eye(len(y)))
        return np.dot(y, np.linalg.solve(E, y)) + np.linalg.slogdet(E)[1]

    return _fun
